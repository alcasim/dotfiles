# vim:set filetype=sh:

# enable color support of ls and also add handy aliases
if [ -x "$(command -v dircolors)" ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias dir='dir --color=auto'
  alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  alias watch='watch --color'
fi

# some more ls aliases
if [ -x "$(command -v els)" ]; then
  alias els='els --els-icons=fontawesome'
  # alias ls='els --els-icons=fontawesome'
fi
if [ -x "$(command -v exa)" ]; then
  alias ls='exa'
  alias tree='exa -T'
fi
alias lc='colorls'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lt='ls -lht && echo "------Oldest--"'
alias ltr='ls -lhtr && echo "------Newest--"'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Location aliases
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias back='cd $OLDPWD'

# Geeknote alias
function gn_sync_notebook() {
  gnsync --path ~/Evernote/$1 --logpath ~/.log/geeknote$1.log --format markdown --notebook "$1" --two-way TWO_WAY
}

function gn_sync_all() {
  for D in *; do gn_sync_notebook $D; done
}

# Vim aliases
# Use neovim if available
if [ -x "$(command -v nvim)" ]; then
  alias vi='nvim'
  alias vim='nvim'
  alias vimdiff='nvim -d'
else
  alias vi='vim'
  alias vimdiff='vim -d'
fi

alias vim-geeknote='vi -c Geeknote'
alias geeknote-vim='vi -c Geeknote'

# Aliases for vim Vundle
# alias vim-install='vi +PluginInstall +qall'
# alias vim-update='vi +PluginUpdate +qall'
# alias vim-clean='vi +PluginClean +qall'

# Aliases for vim-plug
alias vim-install='vi +PlugInstall +qall'
alias vim-update='vi +PlugUpdate +PlugUpgrade +qall'
alias vim-clean='vi +PlugClean! +qall'

alias gitv='vi +GV -c tabonly'
# alias Gitv='vi "$(git rev-parse --show-toplevel)"/.git/index -c "Gitv --all" -c "tabonly"'

# Codi
# Usage: codi [filetype] [filename]
function codi() {
  local syntax="${1:-python}"
  shift
  vi -c "Codi $syntax" "$@"
}

# Json aliases
# Usage: json-diff file1 file2 section_on_file1 section_on_file2
function json-diff() {
  opts=$(echo $@ | grep -Eo '(( |^)-\w+)+' | tr '\n' ' ')
#  while getopts {a..z} opt; do :; done
#  shift $(($OPTIND-1))
  for o in $opts; do shift; done
  section1=$3
  section2=$4
  if [ -z $section1 ]; then
    section1='.'
  fi
  if [ -z $section2 ]; then
    section2=$section1
  fi
  colordiff $opts <(cat ${1} | jq -S "$section1") <(cat ${2} | jq -S "$section2")
}

function json-merge() {
  jq -s '.[0] * .[1]' $1 $2
}

function json-prettify-sort() {
  cat ${1} | jq -S . > ${1}.fixed; mv ${1}.fixed ${1}
}

function json-prettify() {
  cat ${1} | jq . > ${1}.fixed; mv ${1}.fixed ${1}
}

alias json-prettify-all='for f in *.json; do json-prettify ${f}; done'

# Git aliases
alias git-pull-recursive='git recursive pull'
alias git-pull-all='git recursive pull'
alias git-clean-all='git recursive clean'

# if [ -x "$(command -v lab)" ]; then
#   alias git=lab
# elif [ -x "$(command -v hub)" ]; then
#   alias git=hub
# fi

function git-status() {
  UNCOMMITED=$(git status -s)
  LOCAL=$(git rev-parse @)
  REMOTE=$(git rev-parse @{u})
  BASE=$(git merge-base @ @{u})

  if [ "$UNCOMMITED" != "" ]; then
    echo "Need to commit"
  elif [ $LOCAL = $REMOTE ]; then
    echo "Up-to-date"
  elif [ $LOCAL = $BASE ]; then
    echo "Need to pull"
  elif [ $REMOTE = $BASE ]; then
    echo "Need to push"
  else
    echo "Diverged"
  fi
}

alias git-info='git remote show origin'
alias git-status-sb='git status -sb'
alias git-logbranches='git for-each-ref --sort=-committerdate refs/heads/ --format="%(color:red)%(refname:short)%(color:reset)   %(subject)"'
alias git-unpushed-commits='git for-each-ref --format="%(push:track)" refs/heads'
alias git-prune-branches='git remote prune origin'
alias git-prune-merged='git branch -r --merged | grep -v master | sed '\''s/origin\///'\'' | xargs -n 1 -r git push --delete origin'
alias git-purge-branches='git fetch --all -p; git branch -vv | grep "\[.*: gone\]" | awk '\''{ print $1 }'\'' | xargs -n 1 -r git branch -d'
alias git-current-tag='git name-rev --tags --name-only $(git rev-parse HEAD)'
alias git-reset='git fetch origin; git reset --hard $(git remote | head -1)/$(git name-rev --name-only HEAD); git clean -fdx'
alias git-tags='git for-each-ref --format "%(refname) %09 %(taggerdate) %(subject) %(taggeremail)" refs/tags  --sort=taggerdate'
alias git-log='git lg'
# change the current directory to the parent directory that contains the .git folder
alias git-root='cd "`git rev-parse --show-toplevel`"'

alias masterDiff='git diff $(git merge-base --fork-point master)'
alias latestTag='git describe --tags `git rev-list --tags --max-count=1`'
alias latestTagDiff='git show --name-only `git describe --tags` `git rev-list --tags --max-count=1`..'

function git-compare() {
  git rev-list --left-right --count $1...$2
}

function git-branch-status() {
  git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \
  while read local remote
  do
    [ -z "$remote" ] && continue
    git rev-list --left-right ${local}...${remote} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
    LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
    RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
    echo "$local (ahead $LEFT_AHEAD) | (behind $RIGHT_AHEAD) $remote"
  done
}

# Merges current branch with the specified branch
function git-merge() {
  CUR_BRANCH=$(basename $(git symbolic-ref -q HEAD))
  SRC_BRANCH=${1:-"master"}
  git pull && git checkout ${SRC_BRANCH} && git pull && git checkout ${CUR_BRANCH} && git pull && git merge ${SRC_BRANCH}
}

alias standup='cd code/; git standup -s -m4 -d3; back'

# Grep aliases
alias todos="ack -n --nogroup '(TODO|FIX(ME)?):'"

# Usage: df -h|fawk 2 ; replaces: df -h | awk '{print $2}'
function fawk() {
    first="awk '{print "
    last="}' $2"
    cmd="${first}\$${1}${last}"
    echo $cmd
    eval $cmd
}

# Colored diffs
if [ -x "$(command -v colordiff)" ]; then
  alias diff='colordiff'
fi

# Syntax highlighting in cat and less
# you need Pygments: pip install Pygments
alias colorcat='pygmentize -g'
# or source-highlight: sudo apt install source-highlight
# alias Cat='source-highlight --out-format=esc -o STDOUT -i'
# alias PCat='source-highlight --out-format=esc -o STDOUT'
if [ -x "$(command -v bat)" ]; then
  alias Cat="bat --theme ${BAT_THEME:-DarkNeon}"
  alias cat="bat --theme ${BAT_THEME:-DarkNeon} --plain"
else
  alias Cat='colorcat'
fi

# Colorful less
function cless() {
  if [ $# -eq 0 ]; then
    cat | pygmentize -g | less -R
  else
    pygmentize -f terminal "$1" | less -R
  fi
}

# Knife and chef aliases

alias setChef='eval "$(chef shell-init bash)"'
alias useChef='setChef'

function chef-env-list-versions() {
  cdir=$(pwd)
  cd chef/environments
  grep -E '".*":\s*"= .*"' * | tr -s " " | tr -d ','| cut -d ':' -f2,3 | sort -u
  cd $cdir
}

function knife-env-list-versions() {
  cdir=$(pwd)
  cd chef/environments
  for f in *.json; do echo ">>> $f"; jq '.cookbook_versions' $f; echo ''; done
  cd $cdir
}

function knife-prune-nodes() {
  env=${1}
  if [ -z "${env}" ]; then
    env="*"
  fi
  for node in $(knife search node "chef_environment:${env} AND ohai_time:[* TO $(date +%s -d '25hours ago')]" -i); do
    knife client delete -y $node
    knife node delete -y $node
  done
}

# Compares two environments in terms of pinned cookbook versions
# Usage: chef-env-compare-versions env-a env-b
function chef-env-compare-versions() {
  cdir=$(pwd)
  cd chef/environments
  json-diff -y ${1}.json ${2}.json ".cookbook_versions"
  cd $cdir
}

# Promotes a specific version of a cookbook to all environments that have a version of that cookbok pinned to a different version
# Usage: chef-promot-all <cookbook> <version>
function knife-promote-all() {
  cdir=$(pwd)
  cd chef/environments
  grep -E '".*":\s*"= .*"' * | grep $1 | grep -v "= $2" | cut -d'.' -f1 | xargs -n1 -r -I{} knife spork promote {} $1 -v $2 --remote --yes
  cd $cdir
}

# Promotes a specific version of a cookbook to all environments that have a version of that cookbok pinned to a specific version
# Usage: chef-promot-eq <cookbook> <version_old> <version_new>
function knife-promote-eq() {
  cdir=$(pwd)
  cd chef/environments
  grep -E '".*":\s*"= .*"' * | grep $1 | grep "= $2" | cut -d'.' -f1 | xargs -n1 -r -I{} knife spork promote {} $1 -v $3 --remote --yes
  cd $cdir
}

# Promotes a specific version of a cookbook to all environments that have a version of that cookbok pinned to an older version
# Usage: chef-promot-lt <cookbook> <version>
function knife-promote-lt() {
  cdir=$(pwd)
  cd chef/environments
  for environment in $(grep -E '".*":\s*"= .*"' * | grep $1 | tr -d ' '| grep -v "$2"); do
    version=$(echo $environment | cut -d \" -f4 | tr -d '=')
    environment=$(echo $environment | cut -d \. -f1)
    if [ "$version" = "$(echo -e "$version\n$2" | sort -V | head -n1)" ]; then
      echo "Promoting $1 from $version to $2 on $environment"
      knife spork promote $environment $1 -v $2 --remote --yes
    fi
  done
  cd $cdir
}

function knife-ciphertext() {
  sed -e "s/knife\[\:secret_file\]/\#knife\[\:secret_file\]/" -i.bak ~/.chef/config.rb
  knife $@ --format=json
  mv ~/.chef/config.rb.bak ~/.chef/config.rb
}

# Usage knife-delete-attr 'name:some-server' default some_attribute
function knife-delete-attr() {
  knife exec -E "nodes.transform(\"$1\") { |n| n.$2_attrs.delete(\"$3\"); n.save() }"
}

alias screen-killall='for sess in $(screen -ls); do $ screen -X -S $sess quit'

# Vagrant aliases
alias vagrant-clean='vagrant nuke && vagrant global-status --prune'

# Docker aliases
alias docker-killall='docker ps -a -q | xargs -r docker kill'
alias docker-rm-all='docker ps -a -q | xargs -r docker rm'
alias docker-rm-volumes='docker volume prune'
alias docker-rmi-untagged='docker rmi $(docker images | awk '\''/^<none>/ {print $3}'\'')'
alias docker-rmi-all='docker images -q | xargs -r docker rmi'
alias docker-cleanup='docker-killall; docker-rm-all; docker-rmi-all'
alias docker-gc='docker rmi $(docker images -f "dangling=true" -q)'
alias docker-exec="docker exec -i -t"
alias docker-vm="screen $HOME/Library/Containers/com.docker.docker/Data/vms/0/tty"

function docker-enter() {
  docker exec -i -t $1 /bin/sh
}

function docker-retag() {
  for image in $(docker images | grep "${1}" | awk '{print $1}'); do
    image2=$(echo ${image} | sed -e "s/${1}/${2}/")
    echo "Retagging ${image} as ${image2}"
    docker tag ${image} ${image2}
    docker push ${image2}
  done
}

# Kubernetes aliases
function kubectl-enter() {
  kubectl exec -ti ${@} -- sh
}
alias kctl-enter='kubectl-enter'
alias kexec='kubectl-enter'

function kube-remote-shell() {
  kubectl ${@} run --restart=Never --rm -i --tty alpine --image=alpine -- sh
}
alias kube-shell='kube-remote-shell'
alias kctl-shell='kube-remote-shell'

function kgy() {
  kubectl get ${@} -o yaml | bat --theme ${BAT_THEME:-Darkneon} -l yaml
}

function kube-purge-crd() {
  kubectl get ${1} --all-namespaces --no-headers | awk '{print $2 " -n " $1}' | xargs -L1 -r kubectl patch -p '{"metadata":{"finalizers": []}}' --type=merge ${1};
  kubectl get ${1} --all-namespaces --no-headers | awk '{print $2 " -n " $1}' | xargs -L1 -r kubectl delete ${1};
  kubectl api-resources -o name | grep "${1}" | awk '{print $1}' | xargs -r kubectl delete crd
}

alias kube='kubectl'
alias kctl='kubectl'
alias kctx='kubectx'
alias kns='kubens'

alias kctl-clean='kubectl get po --all-namespaces --no-headers | grep -v Running | awk '\''{print $2 " -n " $1}'\'' | xargs -L1 -r kubectl delete po'
alias kube-clean='kctl-clean'

alias kctl-list_images='kubectl get pods --all-namespaces -o jsonpath="{..image}" | tr -s "[[:space:]]" "\n" | sort | uniq -c'

# Helm aliases
alias helm-plugin-update='helm plugin list | awk '\''!/NAME/ {print $1}'\'' | xargs -n 1 -r helm plugin update'

# microk8s aliases for macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
  alias microk8s.install='multipass exec microk8s-vm -- sudo snap install microk8s --classic && multipass exec microk8s-vm -- sudo iptables -P FORWARD ACCEPT'
  alias microk8s.setup='multipass exec microk8s-vm -- /snap/bin/microk8s.enable dns storage ingress metrics-server dashboard registry'
  alias microk8s.new='multipass launch --name microk8s-vm --mem 4G --disk 40G && microk8s.install && microk8s.setup'
  alias microk8s.start='multipass start microk8s-vm'
  alias microk8s.stop='multipass stop microk8s-vm'
  alias microk8s.delete='multipass delete microk8s-vm && multipass purge'
  alias microk8s.ip='multipass list | grep microk8s-vm | awk '\''{print $3}'\'''
  alias microk8s.shell='multipass shell microk8s-vm'
  alias microk8s.status='multipass exec microk8s-vm -- /snap/bin/microk8s.status'
  alias microk8s.enable='multipass exec microk8s-vm -- /snap/bin/microk8s.enable'
  alias microk8s.config='multipass exec microk8s-vm -- /snap/bin/microk8s.config'
  alias microk8s.docker='multipass exec microk8s-vm -- /snap/bin/microk8s.docker'
  alias microk8s.kubectl='multipass exec microk8s-vm -- /snap/bin/microk8s.kubectl'
fi

# Gardener aliases
alias gctl='gardenctl'
alias gk='gardenctl kubectl --'

# Target a shoot in a graden
# shoot <garden> <shoot>
function shoot() {
  if [[ "${1}" == "ls" ]]; then
    for g in $(garden ls | grep name | cut -d' ' -f3); do
      echo -n "${g} "
      shoot ${g} ls
      echo ''
    done
    return
  fi
  gardenctl target garden ${1} > /dev/null
  case ${2} in
    "ls") gardenctl ls shoots;;
    *)
      export $(gardenctl target shoot ${2})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

function seed() {
  if [[ "${1}" == "ls" ]]; then
    for g in $(garden ls | grep name | cut -d' ' -f3); do
      echo -n "${g} "
      seed ${g} ls
      echo ''
    done
    return
  fi
  gardenctl target garden ${1} > /dev/null
  case ${2} in
    "ls") gardenctl ls seeds;;
    *)
      export $(gardenctl target seed ${2})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

function garden() {
  case ${1} in
    "ls") gardenctl ls gardens;;
    *)
      export $(gardenctl target garden ${1})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

# Gem aliases
# alias gem-upgrade='gem update $(gem list | cut -d\  -f 1)'
alias gem-upgrade='gem update && gem cleanup'

# npm aliases
alias npm-upgrade='npm upgrade -g'

if [[ "$OSTYPE" == *"android"* ]]; then
  alias npm='proot --link2symlink npm'
fi

# Go aliases
function goclean() {
  rm -rf ~/.glide/
  rm -rf ~/go/.cache/
  rm -rf ~/go/pkg/*
  rm -rf ~/go/src/*
  rm -rf ~/.cache/go-build/
}
alias go-clean='goclean'

# Python aliases
alias python='python3'
alias pip='pip3'

# PIP aliases
alias pip-upgrade='(echo pip; pip freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip install -U'
alias pip3-upgrade='(echo pip; pip3 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip3 install -U'
alias pip2-upgrade='(echo pip; pip2 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip2 install -U'
alias pip-clean='rm -rf ~/.cache/pip/'

# apt & brew aliases
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if ! [ -x "$(command -v brew)" ]; then
    alias brew='apt'
  fi

# if user is not root, pass all commands via sudo #
  if [ $(id -u) -ne 0 ]; then
    alias apt='sudo apt'
    alias apt-get='sudo apt-get'
    alias aptitude='sudo aptitude'
    alias gem='sudo -H gem'
    alias pip='sudo -H pip'
  fi

  function apt-cleanup() {
    ls /boot/ | grep vmlinuz | sed 's@vmlinuz-@linux-image-@g' | sed 's@\.efi\.signed@@g' | grep -v $(uname -r) | sort -Vru | tail -n +2 | xargs -r sudo aptitude purge -y
    sudo apt autoremove
    sudo aptitude autoclean
    sudo apt-get clean
    dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge
  }

  alias apt-upgrade='sudo apt update; sudo apt full-upgrade; apt-cleanup'
  alias dist-upgrade=apt-upgrade

elif [[ "$OSTYPE" == "darwin"* ]]; then
  alias apt='brew'
  alias cask='brew cask'
  alias tap='brew tap'
  alias service='brew services'

  brew-cask-upgrade() {
    if [ "$1" != '--continue' ]; then
      echo "Removing brew cache"
      rm -rf "$(brew --cache)"
      echo "Running brew update"
      brew update
    fi
    for c in $(brew cask list); do
      installed=$(ls $(brew --prefix)/Caskroom/$c)
      info=$(brew cask info $c)
      installed_version=$(echo $installed)
      info_version=$(echo $info | grep "$c: " | cut -d ' ' -f2)
      if [[ "$installed_version" != "$info_version" ]]; then
        echo -e "\n\nInstalled versions of $c:"
        echo "$installed"
        echo -e "\nCask info for $c:"
        echo "$info"
        if [ "$1" != '-y' ]; then
          select ynx in "Yes" "No" "Exit"; do
            case $ynx in
              "Yes") echo "Re-installing $c"; brew cask reinstall "$c"; break;;
              "No") echo "Skipping $c"; break;;
              "Exit") echo "Exiting brew-cask-upgrade"; return;;
            esac
          done
        else
          echo -e "${COL_YELLOW}>>>${COL_RESET} Re-installing $c"; brew cask reinstall "$c"
        fi
      else
          echo -e "${COL_BLUE}>>>${COL_RESET} $c is up to date"
      fi
    done
    brew cleanup
  }

  check-keg_only() {
    kegs=$(brew info --installed --json | jq -r 'map(select(.keg_only == true and .linked_keg == null)) | "/usr/local/opt/" + .[].name + "/bin"')
    for keg in $kegs; do
      if ! [[ ":$PATH:" == *":${keg}:"* ]] && [ -d "$keg" ]; then
        echo -e "\n# WARNING: ${keg} is not in your PATH"
        echo '# add the following to your profile to fix it'
        cat << EOF
if [ -d '${keg}' ]; then
  PATH="${keg}:\$PATH"
fi
EOF
      fi
    done
  }

  alias cask-upgrade='brew-cask-upgrade'
  alias brew-cleanup='brew cleanup'
  alias brew-upgrade='brew update && brew upgrade && brew cleanup && check-keg_only'
  alias dist-upgrade='brew-upgrade && brew-cask-upgrade -y'
elif [[ "$OSTYPE" == *"android"* ]]; then
  alias apt-upgrade='apt update; apt full-upgrade'
  alias dist-upgrade=apt-upgrade
fi

function update-all-things() {
  npm-upgrade && gem-upgrade && pip-upgrade && dist-upgrade && vim-update
  # if [ -x "$(command -v go)" ]; then
  #   go get -u all
  # fi
  if [ -x "$(command -v apm)" ]; then
    apm upgrade --no-confirm
  fi
  if [ -x "$(command -v mas)" ]; then
    mas upgrade
  fi
  if [ -x "$(command -v softwareupdate)" ]; then
    softwareupdate --install -a
  fi
  if [ -x "$(command -v vagrant)" ]; then
    vagrant plugin update
  fi
}

# Make open and xdg-open work on all plaforms
if ! [ -x "$(command -v open)" ]; then
  alias open='xdg-open'
elif ! [ -x "$(command -v xdg-open)" ]; then
  alias xdg-open='open'
fi
alias cygstart='open'

# Get all records from a domain
alias dig-all='dig +nocmd +multiline +noall +answer any'

alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias sysState="top -l 1 -s 0 | awk ' /Processes/ || /PhysMem/ || /Load Avg/{print}'"

alias cls='clear'

alias gr='rg'

# Fix window title after ssh
function ssh() {
  if [[ "$TERM" =~ "screen" ]] && [ -n "$TMUX" ]; then
    command ssh "$@"
    tmux set-window-option automatic-rename "on" 1>/dev/null
  else
    command ssh "$@"
  fi
}

# key management aliases: fingerprint a pubkey and retrieve pubkey from a private key
alias fingerprint='ssh-keygen -lf'
alias pubkey='ssh-keygen -y -f'

alias headers='curl -ISs'

#Bash calculator.
function calc() {
  bc -l <<< "${1}";
}

# Bash weather app
function wttr() {
  curl "wttr.in/${1}"
}
alias wttr_moon='curl wttr.in/Moon'

# get external ip address
function ipinfo() {
  # we could also use curl ifconfig.co
  echo "Egress address: $(curl -s http://ipinfo.io/ip || echo 'Unable to connect!')"
  ip route get default 2>/dev/null || ip route ls
  ping -c 1 google.com >/dev/null 2>&1 && echo -e "Connection: ${COL_GREEN}✔${COL_RESET}" || echo -e "Connection: ${COL_RED}✘${COL_RESET}"
}

# get TLS cert info
function certinfo() {
  echo | openssl s_client -showcerts -servername ${1} -connect ${1}:443 2>/dev/null | openssl x509 -inform pem -noout -text
}

# get internet speed
alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip'

alias lstcp='lsof -nP | grep TCP | grep LISTEN'
alias lsudp='lsof -nP | grep UDP | grep LISTEN'
alias lsservers='lsof -nP | grep LISTEN'

alias netdata='docker run --rm --cap-add SYS_PTRACE -v /proc:/host/proc:ro -v /sys:/host/sys:ro -p 19999:19999 titpetric/netdata'

# Start a local grafana for dashboard development
alias grafana='docker run --rm -p 3000:3000 -e "GF_SECURITY_ADMIN_PASSWORD=secret" grafana/grafana'

function hgrep() {
  if [ ! -z "$1" ]; then
    grep "${1}" ~/.bash_eternal_history
  else
    history
  fi
}
alias histg='hgrep'

# fh - repeat history
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

alias no-trail="ag --print0 -l '[ \t]+$' | xargs -0 -n1 -r perl -pi -e 's/[ \t]+$//'"

# Deduplicate path variables
get_var () {
  eval 'printf "%s\n" "${'"$1"'}"'
}

set_var () {
  eval "$1=\"\$2\""
}

dedup_pathvar () {
  pathvar_name="$1"
  pathvar_value="$(get_var "$pathvar_name")"
  deduped_path="$(perl -e 'print join(":",grep { not $seen{$_}++ } split(/:/, $ARGV[0]))' "$pathvar_value")"
  set_var "$pathvar_name" "$deduped_path"
}

# Simplified archive extraction
function extract() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ] ; then
      local nameInLowerCase=`echo "${1}" | awk '{print tolower($0)}'`
      case "$nameInLowerCase" in
        *.tar.bz2)   tar xvjf ./"$1"    ;;
        *.tar.gz)    tar xvzf ./"$1"    ;;
        *.tar.xz)    tar xvJf ./"$1"    ;;
        *.lzma)      unlzma ./"$1"      ;;
        *.bz2)       bunzip2 ./"$1"     ;;
        *.rar)       unrar x -ad ./"$1" ;;
        *.gz)        gunzip ./"$1"      ;;
        *.tar)       tar xvf ./"$1"     ;;
        *.tbz2)      tar xvjf ./"$1"    ;;
        *.tgz)       tar xvzf ./"$1"    ;;
        *.zip)       unzip ./"$1"       ;;
        *.Z)         uncompress ./"$1"  ;;
        *.7z)        7z x ./"$1"        ;;
        *.xz)        unxz ./"$1"        ;;
        *.exe)       cabextract ./"$1"  ;;
        *)           echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "'$1' - file does not exist"
    fi
  fi
}

# https://github.com/idank/explainshell/issues/4#issuecomment-354709120
function explain-shell() {
  response=$(w3m -dump 'http://explainshell.com/explain?cmd='$(echo $@ | tr ' ' '+'}))
  cat -s <(grep -v -e explainshell -e • -e □ -e 'source manpages' <<< "$response")
}

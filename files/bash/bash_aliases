# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lt='ls -lht && echo "------Oldest--"'
alias ltr='ls -lhtr && echo "------Newest--"'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Location aliases
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias back='cd $OLDPWD'

alias workingCopies='cd ${WORKINGCOPIES}'

function code() {
  cd ${CODE}/$1
}
function github() {
  cd ${GITHUB}/$1
}
function gitlab() {
  cd ${GITLAB}/$1
}
function bitbucket() {
  cd ${BITBUCKET}/$1
}

function playbooks() {
  cd ${PLAYBOOKS}/$1
}

alias chef-roles='cd ${CHEF_ROLES}'
alias chef-environments='cd ${CHEF_ENVIRONMENTS}'
alias chef-handlers='cd ${CHEF_HANDLERS}'

function chef-data-bags() {
  cd ${CHEF_DATA_BAGS}/$1
}
function chef-cookbooks() {
  cd ${CHEF_COOKBOOKS}/$1
}

function dockerfiles() {
  cd ${DOCKERFILES}/$1
}

function terraformfiles() {
  cd ${TERRAFORM}/$1
}
alias terraform-modules='terraformfiles'

function dcos-clusters() {
  cd ${DCOS_CLUSTERS}/$1
}

# Geeknote alias
function gn_sync_notebook() {
  gnsync --path ~/Evernote/$1 --logpath ~/.log/geeknote$1.log --format markdown --notebook "$1" --two-way TWO_WAY
}

function gn_sync_all() {
  for D in *; do gn_sync_notebook $D; done
}

# Vim aliases
# Use nvim
# alias vim='nvim'
# alias vi='nvim'
# alias vimdiff='nvim -d'

# Use vim
alias vi='vim'
alias vimdiff='vim -d'

alias vim-geeknote='vim -c Geeknote'
alias geeknote-vim='vim -c Geeknote'

# Aliases for vim Vundle
# alias vim-install='vim +PluginInstall +qall'
# alias vim-update='vim +PluginUpdate +qall'
# alias vim-clean='vim +PluginClean +qall'

# Aliases for vim-plug
alias vim-install='vim +PlugInstall +qall'
alias vim-update='vim +PlugUpdate +PlugUpgrade +qall'
alias vim-clean='vim +PlugClean! +qall'

alias gitv='vim +GV -c tabonly'
# alias Gitv='vim "$(git rev-parse --show-toplevel)"/.git/index -c "Gitv --all" -c "tabonly"'

# Codi
# Usage: codi [filetype] [filename]
function codi() {
  local syntax="${1:-python}"
  shift
  vim -c "Codi $syntax" "$@"
}

# Json aliases
# Usage: json-diff file1 file2 section_on_file1 section_on_file2
function json-diff() {
  opts=$(echo $@ | grep -Po '(( |^)-\w+)+' | tr '\n' ' ')
#  while getopts {a..z} opt; do :; done
#  shift $(($OPTIND-1))
  for o in $opts; do shift; done
  section1=$3
  section2=$4
  if [ -z $section1 ]; then
    section1='.'
  fi
  if [ -z $section2 ]; then
    section2=$section1
  fi
  colordiff $opts <(cat ${1} | jq -S "$section1") <(cat ${2} | jq -S "$section2")
}

function json-merge() {
  jq -s '.[0] * .[1]' $1 $2
}

function json-prettify() {
  cat ${1} | jq -S . > ${1}.fixed; mv ${1}.fixed ${1}
}

alias json-prettify-all='for f in *.json; do json-prettify ${f}; done'

# Git aliases
function git-pull-all() {
  cdir=$(pwd)
  bdir='.'
  if [ ! -z $1 ]; then
    bdir=$1
  fi
  repos=$(find ${bdir} -type d -name .git -exec sh -c "dirname \\"{}/\\"" \; | grep -Ev '.*\/\..*')
  for d in $repos; do echo ">>> $d"; cd $d; git pull; cd $cdir; done
}
alias git-pull-recursive='git-pull-all'

function git-clean-all() {
  cdir=$(pwd)
  if [ ! -z $1 ]; then
    cd $1
  fi
  for d in $(ls -d */); do echo $d; cd $d; git clean -fdX; cd ..; done
  cd $cdir
}

function git-status() {
  UNCOMMITED=$(git status -s)
  LOCAL=$(git rev-parse @)
  REMOTE=$(git rev-parse @{u})
  BASE=$(git merge-base @ @{u})

  if [ "$UNCOMMITED" != "" ]; then
    echo "Need to commit"
  elif [ $LOCAL = $REMOTE ]; then
    echo "Up-to-date"
  elif [ $LOCAL = $BASE ]; then
    echo "Need to pull"
  elif [ $REMOTE = $BASE ]; then
    echo "Need to push"
  else
    echo "Diverged"
  fi
}

alias git-info='git remote show origin'
alias git-status-sb='git status -sb'
alias git-logbranches='git for-each-ref --sort=-committerdate refs/heads/ --format="%(color:red)%(refname:short)%(color:reset)   %(subject)"'
alias git-unpushed-commits='git for-each-ref --format="%(push:track)" refs/heads'
alias git-prune-branches='git remote prune origin'
alias git-prune-merged='git branch -r --merged | grep -v master | sed '\''s/origin\///'\'' | xargs -n 1 git push --delete origin'
alias git-purge-branches='git fetch --all -p; git branch -vv | grep "\[.*: gone\]" | awk '\''{ print $1 }'\'' | xargs -n 1 git branch -d'
alias git-current-tag='git name-rev --tags --name-only $(git rev-parse HEAD)'
alias git-reset='git fetch origin; git reset --hard origin/master; git clean -fdx'
alias git-tags='git for-each-ref --format "%(refname) %09 %(taggerdate) %(subject) %(taggeremail)" refs/tags  --sort=taggerdate'
alias git-log='git lg'
# change the current directory to the parent directory that contains the .git folder
alias git-root='cd "`git rev-parse --show-toplevel`"'

alias masterDiff='git diff $(git merge-base --fork-point master)'
alias latestTag='git describe --tags `git rev-list --tags --max-count=1`'
alias latestTagDiff='git show --name-only `git describe --tags` `git rev-list --tags --max-count=1`..'

function git-compare() {
  git rev-list --left-right --count $1...$2
}

function git-branch-status() {
  git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \
  while read local remote
  do
    [ -z "$remote" ] && continue
    git rev-list --left-right ${local}...${remote} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
    LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
    RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
    echo "$local (ahead $LEFT_AHEAD) | (behind $RIGHT_AHEAD) $remote"
  done
}

# Merges current branch with the specified branch
function git-merge() {
  CUR_BRANCH=$(basename $(git symbolic-ref -q HEAD))
  SRC_BRANCH=${1:-"master"}
  git pull && git checkout ${SRC_BRANCH} && git pull && git checkout ${CUR_BRANCH} && git pull && git merge ${SRC_BRANCH}
}

alias standup='code; git standup -m3 -d3; back'

# Grep aliases
alias todos="ack -n --nogroup '(TODO|FIX(ME)?):'"

# Usage: df -h|fawk 2 ; replaces: df -h | awk '{print $2}'
function fawk() {
    first="awk '{print "
    last="}' $2"
    cmd="${first}\$${1}${last}"
    echo $cmd
    eval $cmd
}

# Colored man pages
function man() {
  env \
  LESS_TERMCAP_mb=$(printf "\e[1;31m") \
  LESS_TERMCAP_md=$(printf "\e[1;31m") \
  LESS_TERMCAP_me=$(printf "\e[0m") \
  LESS_TERMCAP_se=$(printf "\e[0m") \
  LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
  LESS_TERMCAP_ue=$(printf "\e[0m") \
  LESS_TERMCAP_us=$(printf "\e[1;32m") \
  man "$@"
}

# Syntax highlighting in cat and less
# you need Pygments: pip install Pygments
alias colorcat='pygmentize -g'
alias Cat='colorcat'
# or source-highlight: sudo apt install source-highlight
# alias Cat='source-highlight --out-format=esc -o STDOUT -i'
# alias PCat='source-highlight --out-format=esc -o STDOUT'

function cless() {
  if [ $# -eq 0 ]; then
    cat | pygmentize -g | less -R
  else
    pygmentize -f terminal "$1" | less -R
  fi
}

# Knife and chef aliases

function chef-env-list-versions() {
  cdir=$(pwd)
  chef-environments
  grep -P '".*":\s*"= .*"' * | tr -s " " | tr -d ','| cut -d ':' -f2,3 | sort -u
  cd $cdir
}

# Compares two environments in terms of pinned cookbook versions
# Usage: chef-env-compare-versions env-a env-b
function chef-env-compare-versions() {
  cdir=$(pwd)
  chef-environments
  json-diff -y ${1}.json ${2}.json ".cookbook_versions"
  cd $cdir
}

# Promotes a specific version of a cookbook to all environments that have a version of that cookbok pinned to a different version
# Usage: chef-promot-all <cookbook> <version>
function knife-promote-all() {
  cdir=$(pwd)
  chef-environments
  grep -P '".*":\s*"= .*"' * | grep $1 | grep -v "= $2" | cut -d'.' -f1 | xargs -n1 -I{} knife spork promote {} $1 -v $2 --remote --yes
  cd $cdir
}

# Promotes a specific version of a cookbook to all environments that have a version of that cookbok pinned to a specific version
# Usage: chef-promot-eq <cookbook> <version_old> <version_new>
function knife-promote-eq() {
  cdir=$(pwd)
  chef-environments
  grep -P '".*":\s*"= .*"' * | grep $1 | grep "= $2" | cut -d'.' -f1 | xargs -n1 -I{} knife spork promote {} $1 -v $3 --remote --yes
  cd $cdir
}

# Promotes a specific version of a cookbook to all environments that have a version of that cookbok pinned to an older version
# Usage: chef-promot-lt <cookbook> <version>
function knife-promote-lt() {
  cdir=$(pwd)
  chef-environments
  for environment in $(grep -P '".*":\s*"= .*"' * | grep $1 | tr -d ' '| grep -v "$2"); do
    version=$(echo $environment | cut -d \" -f4 | tr -d '=')
    environment=$(echo $environment | cut -d \. -f1)
    if [ "$version" = "$(echo -e "$version\n$2" | sort -V | head -n1)" ]; then
      echo "Promoting $1 from $version to $2 on $environment"
      knife spork promote $environment $1 -v $2 --remote --yes
    fi
  done
  cd $cdir
}

function knife-ciphertext() {
  sed -e "s/knife\[\:secret_file\]/\#knife\[\:secret_file\]/" -i.bak ~/.chef/knife.rb
  knife $@ --format=json
  mv ~/.chef/knife.rb.bak ~/.chef/knife.rb
}

# Usage knife-delete-attr 'name:some-server' default some_attribute
function knife-delete-attr() {
  knife exec -E "nodes.transform(\"$1\") { |n| n.$2_attrs.delete(\"$3\"); n.save() }"
}

# Docker aliases
alias docker-killall='docker ps -a -q | xargs -r docker kill'
alias docker-rm-all='docker ps -a -q | xargs -r docker rm'
alias docker-rmi-all='docker images -q | xargs -r docker rmi'
alias docker-cleanup='docker-killall; docker-rm-all; docker-rmi-all'
alias docker-exec="docker exec -i -t"

function docker-enter() {
  docker exec -i -t $1 bash
}

# Kubernetes aliases
function kubectl-enter() {
  kubectl exec -ti $1 -- bash
}

# Gem aliases
# alias gem-upgrade='gem update $(gem list | cut -d\  -f 1)'
alias gem-upgrade='gem update && gem cleanup'

# npm aliases
alias npm-upgrade='npm upgrade -g'

# PIP aliases
alias pip-upgrade='(echo pip; pip freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs sudo -H pip install -U'
alias pip3-upgrade='(echo pip; pip3 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs sudo -H pip3 install -U'
alias pip2-upgrade='(echo pip; pip2 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs sudo -H pip2 install -U'

# apt aliases
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if ! [ -x "$(command -v brew)" ]; then
    alias brew='apt'
  fi

# if user is not root, pass all commands via sudo #
  if [ $(id -u) -ne 0 ]; then
      alias apt='sudo apt'
      alias apt-get='sudo apt-get'
      alias aptitude='sudo aptitude'
  fi

  function apt-cleanup() {
    ls /boot/ | grep vmlinuz | sed 's@vmlinuz-@linux-image-@g' | grep -v $(uname -r) | sort -Vr | tail -n +2 | xargs -r sudo aptitude purge -y
    sudo aptitude autoclean
    sudo apt-get autoremove
    sudo apt-get clean
    dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge
  }

  alias apt-upgrade='sudo aptitude update ; sudo aptitude dist-upgrade; apt-cleanup'
  alias dist-upgrade=apt-upgrade

elif [[ "$OSTYPE" == "darwin"* ]]; then
  alias apt='brew'
  alias cask='brew cask'
  alias tap='brew tap'

  brew-cask-upgrade() {
    if [ "$1" != '--continue' ]; then
      echo "Removing brew cache"
      rm -rf "$(brew --cache)"
      echo "Running brew update"
      brew update
    fi
    for c in $(brew cask list); do
      installed=$(ls $(brew --prefix)/Caskroom/$c)
      info=$(brew cask info $c)
      installed_version=$(echo $installed)
      info_version=$(echo $info | grep "$c: " | cut -d ' ' -f2)
      if [[ "$installed_version" != "$info_version" ]]; then
        echo -e "\n\nInstalled versions of $c:"
        echo "$installed"
        echo -e "\nCask info for $c:"
        echo "$info"
        if [ "$1" != '-y' ]; then
          select ynx in "Yes" "No" "Exit"; do
            case $ynx in
              "Yes") echo "Re-installing $c"; brew cask reinstall "$c"; break;;
              "No") echo "Skipping $c"; break;;
              "Exit") echo "Exiting brew-cask-upgrade"; return;;
            esac
          done
        else
          echo "Re-installing $c"; brew cask reinstall "$c"
        fi
      else
          echo -e ">>> $c is up to date"
      fi
    done
    brew cleanup && brew cask cleanup
  }

  alias cask-upgrade='brew-cask-upgrade'
  alias brew-cleanup='brew cleanup && brew cask cleanup'
  alias brew-upgrade='brew update && brew upgrade && brew cleanup && brew cask cleanup'
  alias dist-upgrade='brew-upgrade && brew-cask-upgrade -y'
fi

alias update-all-things='dist-upgrade && apm upgrade && vim-update'

# Get all records from a domain
alias dig-all="dig +nocmd +multiline +noall +answer any"

alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"
alias sysState="top -l 1 -s 0 | awk ' /Processes/ || /PhysMem/ || /Load Avg/{print}'"

alias cls="clear"

# key management aliases: fingerprint a pubkey and retrieve pubkey from a private key
alias fingerprint='ssh-keygen -lf'
alias pubkey='ssh-keygen -y -f'

alias headers='curl -ISs'

#Bash calculator.
function calc() {
  echo "${1}" | bc -l;
}

function wttr() {
  curl "wttr.in/$1"
}
alias wttr_moon='curl wttr.in/Moon'

# get external ip address
alias ipinfo='curl -s http://ipinfo.io/ip'
# get internet speed
alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip'

function hgrep() {
  if [ ! -z "$1" ]; then
    history | grep $1
  else
    history
  fi
}
alias histg='hgrep'

function extract() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ] ; then
      local nameInLowerCase=`echo "$1" | awk '{print tolower($0)}'`
      case "$nameInLowerCase" in
        *.tar.bz2)   tar xvjf ./"$1"    ;;
        *.tar.gz)    tar xvzf ./"$1"    ;;
        *.tar.xz)    tar xvJf ./"$1"    ;;
        *.lzma)      unlzma ./"$1"      ;;
        *.bz2)       bunzip2 ./"$1"     ;;
        *.rar)       unrar x -ad ./"$1" ;;
        *.gz)        gunzip ./"$1"      ;;
        *.tar)       tar xvf ./"$1"     ;;
        *.tbz2)      tar xvjf ./"$1"    ;;
        *.tgz)       tar xvzf ./"$1"    ;;
        *.zip)       unzip ./"$1"       ;;
        *.Z)         uncompress ./"$1"  ;;
        *.7z)        7z x ./"$1"        ;;
        *.xz)        unxz ./"$1"        ;;
        *.exe)       cabextract ./"$1"  ;;
        *)           echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "'$1' - file does not exist"
    fi
  fi
}
